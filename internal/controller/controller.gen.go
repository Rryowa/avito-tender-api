// Package controller provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package controller

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for BidAuthorType.
const (
	Organization BidAuthorType = "Organization"
	User         BidAuthorType = "User"
)

// Defines values for BidDecision.
const (
	BidDecisionApproved BidDecision = "Approved"
	BidDecisionRejected BidDecision = "Rejected"
)

// Defines values for BidStatus.
const (
	BidStatusApproved  BidStatus = "Approved"
	BidStatusCanceled  BidStatus = "Canceled"
	BidStatusCreated   BidStatus = "Created"
	BidStatusPublished BidStatus = "Published"
	BidStatusRejected  BidStatus = "Rejected"
)

// Defines values for TenderServiceType.
const (
	Construction TenderServiceType = "Construction"
	Delivery     TenderServiceType = "Delivery"
	Manufacture  TenderServiceType = "Manufacture"
)

// Defines values for TenderStatus.
const (
	Closed    TenderStatus = "Closed"
	Created   TenderStatus = "Created"
	Published TenderStatus = "Published"
)

// Bid Информация о предложении
type Bid struct {
	// AuthorId Уникальный идентификатор автора предложения, присвоенный сервером.
	AuthorId BidAuthorId `json:"authorId"`

	// AuthorType Тип автора
	AuthorType BidAuthorType `json:"authorType"`

	// CreatedAt Серверная дата и время в момент, когда пользователь отправил предложение на создание.
	// Передается в формате RFC3339.
	CreatedAt string `json:"createdAt"`

	// Description Описание предложения
	Description BidDescription `json:"description"`

	// Id Уникальный идентификатор предложения, присвоенный сервером.
	Id BidId `json:"id"`

	// Name Полное название предложения
	Name BidName `json:"name"`

	// Status Статус предложения
	Status BidStatus `json:"status"`

	// TenderId Уникальный идентификатор тендера, присвоенный сервером.
	TenderId TenderId `json:"tenderId"`

	// Version Номер версии посел правок
	Version BidVersion `json:"version"`
}

// BidAuthorId Уникальный идентификатор автора предложения, присвоенный сервером.
type BidAuthorId = string

// BidAuthorType Тип автора
type BidAuthorType string

// BidDecision Решение по предложению
type BidDecision string

// BidDescription Описание предложения
type BidDescription = string

// BidFeedback Отзыв на предложение
type BidFeedback = string

// BidId Уникальный идентификатор предложения, присвоенный сервером.
type BidId = string

// BidName Полное название предложения
type BidName = string

// BidReview Отзыв о предложении
type BidReview struct {
	// CreatedAt Серверная дата и время в момент, когда пользователь отправил отзыв на предложение.
	// Передается в формате RFC3339.
	CreatedAt string `json:"createdAt"`

	// Description Описание предложения
	Description BidReviewDescription `json:"description"`

	// Id Уникальный идентификатор отзыва, присвоенный сервером.
	Id BidReviewId `json:"id"`
}

// BidReviewDescription Описание предложения
type BidReviewDescription = string

// BidReviewId Уникальный идентификатор отзыва, присвоенный сервером.
type BidReviewId = string

// BidStatus Статус предложения
type BidStatus string

// BidVersion Номер версии посел правок
type BidVersion = int32

// ErrorResponse Используется для возвращения ошибки пользователю
type ErrorResponse struct {
	// Reason Описание ошибки в свободной форме
	Reason string `json:"reason"`
}

// OrganizationId Уникальный идентификатор организации, присвоенный сервером.
type OrganizationId = string

// Tender Информация о тендере
type Tender struct {
	// CreatedAt Серверная дата и время в момент, когда пользователь отправил тендер на создание.
	// Передается в формате RFC3339.
	CreatedAt string `json:"createdAt"`

	// Description Описание тендера
	Description TenderDescription `json:"description"`

	// Id Уникальный идентификатор тендера, присвоенный сервером.
	Id TenderId `json:"id"`

	// Name Полное название тендера
	Name TenderName `json:"name"`

	// OrganizationId Уникальный идентификатор организации, присвоенный сервером.
	OrganizationId OrganizationId `json:"organizationId"`

	// ServiceType Вид услуги, к которой относиться тендер
	ServiceType TenderServiceType `json:"serviceType"`

	// Status Статус тендер
	Status TenderStatus `json:"status"`

	// Version Номер версии посел правок
	Version TenderVersion `json:"version"`
}

// TenderDescription Описание тендера
type TenderDescription = string

// TenderId Уникальный идентификатор тендера, присвоенный сервером.
type TenderId = string

// TenderName Полное название тендера
type TenderName = string

// TenderServiceType Вид услуги, к которой относиться тендер
type TenderServiceType string

// TenderStatus Статус тендер
type TenderStatus string

// TenderVersion Номер версии посел правок
type TenderVersion = int32

// Username Уникальный slug пользователя.
type Username = string

// PaginationLimit defines model for paginationLimit.
type PaginationLimit = int32

// PaginationOffset defines model for paginationOffset.
type PaginationOffset = int32

// GetUserBidsParams defines parameters for GetUserBids.
type GetUserBidsParams struct {
	// Limit Максимальное число возвращаемых объектов. Используется для запросов с пагинацией.
	//
	// Сервер должен возвращать максимальное допустимое число объектов.
	Limit *PaginationLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Какое количество объектов должно быть пропущено с начала. Используется для запросов с пагинацией.
	Offset   *PaginationOffset `form:"offset,omitempty" json:"offset,omitempty"`
	Username *Username         `form:"username,omitempty" json:"username,omitempty"`
}

// CreateBidJSONBody defines parameters for CreateBid.
type CreateBidJSONBody struct {
	// CreatorUsername Уникальный slug пользователя.
	CreatorUsername Username `json:"creatorUsername"`

	// Description Описание предложения
	Description BidDescription `json:"description"`

	// Name Полное название предложения
	Name BidName `json:"name"`

	// OrganizationId Уникальный идентификатор организации, присвоенный сервером.
	OrganizationId OrganizationId `json:"organizationId"`

	// Status Статус предложения
	Status BidStatus `json:"status"`

	// TenderId Уникальный идентификатор тендера, присвоенный сервером.
	TenderId TenderId `json:"tenderId"`
}

// EditBidJSONBody defines parameters for EditBid.
type EditBidJSONBody struct {
	// Description Описание предложения
	Description *BidDescription `json:"description,omitempty"`

	// Name Полное название предложения
	Name *BidName `json:"name,omitempty"`
}

// EditBidParams defines parameters for EditBid.
type EditBidParams struct {
	Username Username `form:"username" json:"username"`
}

// SubmitBidFeedbackParams defines parameters for SubmitBidFeedback.
type SubmitBidFeedbackParams struct {
	BidFeedback BidFeedback `form:"bidFeedback" json:"bidFeedback"`
	Username    Username    `form:"username" json:"username"`
}

// RollbackBidParams defines parameters for RollbackBid.
type RollbackBidParams struct {
	Username Username `form:"username" json:"username"`
}

// GetBidStatusParams defines parameters for GetBidStatus.
type GetBidStatusParams struct {
	Username Username `form:"username" json:"username"`
}

// UpdateBidStatusParams defines parameters for UpdateBidStatus.
type UpdateBidStatusParams struct {
	Status   BidStatus `form:"status" json:"status"`
	Username Username  `form:"username" json:"username"`
}

// SubmitBidDecisionParams defines parameters for SubmitBidDecision.
type SubmitBidDecisionParams struct {
	Decision BidDecision `form:"decision" json:"decision"`
	Username Username    `form:"username" json:"username"`
}

// GetBidsForTenderParams defines parameters for GetBidsForTender.
type GetBidsForTenderParams struct {
	Username Username `form:"username" json:"username"`

	// Limit Максимальное число возвращаемых объектов. Используется для запросов с пагинацией.
	//
	// Сервер должен возвращать максимальное допустимое число объектов.
	Limit *PaginationLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Какое количество объектов должно быть пропущено с начала. Используется для запросов с пагинацией.
	Offset *PaginationOffset `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetBidReviewsParams defines parameters for GetBidReviews.
type GetBidReviewsParams struct {
	// AuthorUsername Имя пользователя автора предложений, отзывы на которые нужно просмотреть.
	AuthorUsername Username `form:"authorUsername" json:"authorUsername"`

	// RequesterUsername Имя пользователя, который запрашивает отзывы.
	RequesterUsername Username `form:"requesterUsername" json:"requesterUsername"`

	// Limit Максимальное число возвращаемых объектов. Используется для запросов с пагинацией.
	//
	// Сервер должен возвращать максимальное допустимое число объектов.
	Limit *PaginationLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Какое количество объектов должно быть пропущено с начала. Используется для запросов с пагинацией.
	Offset *PaginationOffset `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetTendersParams defines parameters for GetTenders.
type GetTendersParams struct {
	// Limit Максимальное число возвращаемых объектов. Используется для запросов с пагинацией.
	//
	// Сервер должен возвращать максимальное допустимое число объектов.
	Limit *PaginationLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Какое количество объектов должно быть пропущено с начала. Используется для запросов с пагинацией.
	Offset *PaginationOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// ServiceType Возвращенные тендеры должны соответствовать указанным видам услуг.
	//
	// Если список пустой, фильтры не применяются.
	ServiceType *[]TenderServiceType `form:"service_type,omitempty" json:"service_type,omitempty"`
}

// GetUserTendersParams defines parameters for GetUserTenders.
type GetUserTendersParams struct {
	// Limit Максимальное число возвращаемых объектов. Используется для запросов с пагинацией.
	//
	// Сервер должен возвращать максимальное допустимое число объектов.
	Limit *PaginationLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Какое количество объектов должно быть пропущено с начала. Используется для запросов с пагинацией.
	Offset   *PaginationOffset `form:"offset,omitempty" json:"offset,omitempty"`
	Username *Username         `form:"username,omitempty" json:"username,omitempty"`
}

// CreateTenderJSONBody defines parameters for CreateTender.
type CreateTenderJSONBody struct {
	// CreatorUsername Уникальный slug пользователя.
	CreatorUsername Username `json:"creatorUsername"`

	// Description Описание тендера
	Description TenderDescription `json:"description"`

	// Name Полное название тендера
	Name TenderName `json:"name"`

	// OrganizationId Уникальный идентификатор организации, присвоенный сервером.
	OrganizationId OrganizationId `json:"organizationId"`

	// ServiceType Вид услуги, к которой относиться тендер
	ServiceType TenderServiceType `json:"serviceType"`

	// Status Статус тендер
	Status TenderStatus `json:"status"`
}

// EditTenderJSONBody defines parameters for EditTender.
type EditTenderJSONBody struct {
	// Description Описание тендера
	Description *TenderDescription `json:"description,omitempty"`

	// Name Полное название тендера
	Name *TenderName `json:"name,omitempty"`

	// ServiceType Вид услуги, к которой относиться тендер
	ServiceType *TenderServiceType `json:"serviceType,omitempty"`
}

// EditTenderParams defines parameters for EditTender.
type EditTenderParams struct {
	Username Username `form:"username" json:"username"`
}

// RollbackTenderParams defines parameters for RollbackTender.
type RollbackTenderParams struct {
	Username Username `form:"username" json:"username"`
}

// GetTenderStatusParams defines parameters for GetTenderStatus.
type GetTenderStatusParams struct {
	Username *Username `form:"username,omitempty" json:"username,omitempty"`
}

// UpdateTenderStatusParams defines parameters for UpdateTenderStatus.
type UpdateTenderStatusParams struct {
	Status   TenderStatus `form:"status" json:"status"`
	Username Username     `form:"username" json:"username"`
}

// CreateBidJSONRequestBody defines body for CreateBid for application/json ContentType.
type CreateBidJSONRequestBody CreateBidJSONBody

// EditBidJSONRequestBody defines body for EditBid for application/json ContentType.
type EditBidJSONRequestBody EditBidJSONBody

// CreateTenderJSONRequestBody defines body for CreateTender for application/json ContentType.
type CreateTenderJSONRequestBody CreateTenderJSONBody

// EditTenderJSONRequestBody defines body for EditTender for application/json ContentType.
type EditTenderJSONRequestBody EditTenderJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получение списка ваших предложений
	// (GET /bids/my)
	GetUserBids(ctx echo.Context, params GetUserBidsParams) error
	// Создание нового предложения
	// (POST /bids/new)
	CreateBid(ctx echo.Context) error
	// Редактирование параметров предложения
	// (PATCH /bids/{bidId}/edit)
	EditBid(ctx echo.Context, bidId BidId, params EditBidParams) error
	// Отправка отзыва по предложению
	// (PUT /bids/{bidId}/feedback)
	SubmitBidFeedback(ctx echo.Context, bidId BidId, params SubmitBidFeedbackParams) error
	// Откат версии предложения
	// (PUT /bids/{bidId}/rollback/{version})
	RollbackBid(ctx echo.Context, bidId BidId, version int32, params RollbackBidParams) error
	// Получение текущего статуса предложения
	// (GET /bids/{bidId}/status)
	GetBidStatus(ctx echo.Context, bidId BidId, params GetBidStatusParams) error
	// Изменение статуса предложения
	// (PUT /bids/{bidId}/status)
	UpdateBidStatus(ctx echo.Context, bidId BidId, params UpdateBidStatusParams) error
	// Отправка решения по предложению
	// (PUT /bids/{bidId}/submit_decision)
	SubmitBidDecision(ctx echo.Context, bidId BidId, params SubmitBidDecisionParams) error
	// Получение списка предложений для тендера
	// (GET /bids/{tenderId}/list)
	GetBidsForTender(ctx echo.Context, tenderId TenderId, params GetBidsForTenderParams) error
	// Просмотр отзывов на прошлые предложения
	// (GET /bids/{tenderId}/reviews)
	GetBidReviews(ctx echo.Context, tenderId TenderId, params GetBidReviewsParams) error
	// Проверка доступности сервера
	// (GET /ping)
	CheckServer(ctx echo.Context) error
	// Получение списка тендеров
	// (GET /tenders)
	GetTenders(ctx echo.Context, params GetTendersParams) error
	// Получить тендеры пользователя
	// (GET /tenders/my)
	GetUserTenders(ctx echo.Context, params GetUserTendersParams) error
	// Создание нового тендера
	// (POST /tenders/new)
	CreateTender(ctx echo.Context) error
	// Редактирование тендера
	// (PATCH /tenders/{tenderId}/edit)
	EditTender(ctx echo.Context, tenderId TenderId, params EditTenderParams) error
	// Откат версии тендера
	// (PUT /tenders/{tenderId}/rollback/{version})
	RollbackTender(ctx echo.Context, tenderId TenderId, version int32, params RollbackTenderParams) error
	// Получение текущего статуса тендера
	// (GET /tenders/{tenderId}/status)
	GetTenderStatus(ctx echo.Context, tenderId TenderId, params GetTenderStatusParams) error
	// Изменение статуса тендера
	// (PUT /tenders/{tenderId}/status)
	UpdateTenderStatus(ctx echo.Context, tenderId TenderId, params UpdateTenderStatusParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetUserBids converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserBids(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserBidsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, false, "username", ctx.QueryParams(), &params.Username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserBids(ctx, params)
	return err
}

// CreateBid converts echo context to params.
func (w *ServerInterfaceWrapper) CreateBid(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateBid(ctx)
	return err
}

// EditBid converts echo context to params.
func (w *ServerInterfaceWrapper) EditBid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "bidId" -------------
	var bidId BidId

	err = runtime.BindStyledParameterWithOptions("simple", "bidId", ctx.Param("bidId"), &bidId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bidId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params EditBidParams
	// ------------- Required query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, true, "username", ctx.QueryParams(), &params.Username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EditBid(ctx, bidId, params)
	return err
}

// SubmitBidFeedback converts echo context to params.
func (w *ServerInterfaceWrapper) SubmitBidFeedback(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "bidId" -------------
	var bidId BidId

	err = runtime.BindStyledParameterWithOptions("simple", "bidId", ctx.Param("bidId"), &bidId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bidId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SubmitBidFeedbackParams
	// ------------- Required query parameter "bidFeedback" -------------

	err = runtime.BindQueryParameter("form", true, true, "bidFeedback", ctx.QueryParams(), &params.BidFeedback)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bidFeedback: %s", err))
	}

	// ------------- Required query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, true, "username", ctx.QueryParams(), &params.Username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SubmitBidFeedback(ctx, bidId, params)
	return err
}

// RollbackBid converts echo context to params.
func (w *ServerInterfaceWrapper) RollbackBid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "bidId" -------------
	var bidId BidId

	err = runtime.BindStyledParameterWithOptions("simple", "bidId", ctx.Param("bidId"), &bidId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bidId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version int32

	err = runtime.BindStyledParameterWithOptions("simple", "version", ctx.Param("version"), &version, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params RollbackBidParams
	// ------------- Required query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, true, "username", ctx.QueryParams(), &params.Username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RollbackBid(ctx, bidId, version, params)
	return err
}

// GetBidStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetBidStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "bidId" -------------
	var bidId BidId

	err = runtime.BindStyledParameterWithOptions("simple", "bidId", ctx.Param("bidId"), &bidId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bidId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBidStatusParams
	// ------------- Required query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, true, "username", ctx.QueryParams(), &params.Username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBidStatus(ctx, bidId, params)
	return err
}

// UpdateBidStatus converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateBidStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "bidId" -------------
	var bidId BidId

	err = runtime.BindStyledParameterWithOptions("simple", "bidId", ctx.Param("bidId"), &bidId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bidId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateBidStatusParams
	// ------------- Required query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, true, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Required query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, true, "username", ctx.QueryParams(), &params.Username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateBidStatus(ctx, bidId, params)
	return err
}

// SubmitBidDecision converts echo context to params.
func (w *ServerInterfaceWrapper) SubmitBidDecision(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "bidId" -------------
	var bidId BidId

	err = runtime.BindStyledParameterWithOptions("simple", "bidId", ctx.Param("bidId"), &bidId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bidId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SubmitBidDecisionParams
	// ------------- Required query parameter "decision" -------------

	err = runtime.BindQueryParameter("form", true, true, "decision", ctx.QueryParams(), &params.Decision)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter decision: %s", err))
	}

	// ------------- Required query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, true, "username", ctx.QueryParams(), &params.Username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SubmitBidDecision(ctx, bidId, params)
	return err
}

// GetBidsForTender converts echo context to params.
func (w *ServerInterfaceWrapper) GetBidsForTender(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenderId" -------------
	var tenderId TenderId

	err = runtime.BindStyledParameterWithOptions("simple", "tenderId", ctx.Param("tenderId"), &tenderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenderId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBidsForTenderParams
	// ------------- Required query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, true, "username", ctx.QueryParams(), &params.Username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBidsForTender(ctx, tenderId, params)
	return err
}

// GetBidReviews converts echo context to params.
func (w *ServerInterfaceWrapper) GetBidReviews(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenderId" -------------
	var tenderId TenderId

	err = runtime.BindStyledParameterWithOptions("simple", "tenderId", ctx.Param("tenderId"), &tenderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenderId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBidReviewsParams
	// ------------- Required query parameter "authorUsername" -------------

	err = runtime.BindQueryParameter("form", true, true, "authorUsername", ctx.QueryParams(), &params.AuthorUsername)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter authorUsername: %s", err))
	}

	// ------------- Required query parameter "requesterUsername" -------------

	err = runtime.BindQueryParameter("form", true, true, "requesterUsername", ctx.QueryParams(), &params.RequesterUsername)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requesterUsername: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBidReviews(ctx, tenderId, params)
	return err
}

// CheckServer converts echo context to params.
func (w *ServerInterfaceWrapper) CheckServer(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CheckServer(ctx)
	return err
}

// GetTenders converts echo context to params.
func (w *ServerInterfaceWrapper) GetTenders(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTendersParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "service_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "service_type", ctx.QueryParams(), &params.ServiceType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter service_type: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTenders(ctx, params)
	return err
}

// GetUserTenders converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserTenders(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserTendersParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, false, "username", ctx.QueryParams(), &params.Username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserTenders(ctx, params)
	return err
}

// CreateTender converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTender(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateTender(ctx)
	return err
}

// EditTender converts echo context to params.
func (w *ServerInterfaceWrapper) EditTender(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenderId" -------------
	var tenderId TenderId

	err = runtime.BindStyledParameterWithOptions("simple", "tenderId", ctx.Param("tenderId"), &tenderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenderId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params EditTenderParams
	// ------------- Required query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, true, "username", ctx.QueryParams(), &params.Username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EditTender(ctx, tenderId, params)
	return err
}

// RollbackTender converts echo context to params.
func (w *ServerInterfaceWrapper) RollbackTender(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenderId" -------------
	var tenderId TenderId

	err = runtime.BindStyledParameterWithOptions("simple", "tenderId", ctx.Param("tenderId"), &tenderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenderId: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version int32

	err = runtime.BindStyledParameterWithOptions("simple", "version", ctx.Param("version"), &version, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params RollbackTenderParams
	// ------------- Required query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, true, "username", ctx.QueryParams(), &params.Username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RollbackTender(ctx, tenderId, version, params)
	return err
}

// GetTenderStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetTenderStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenderId" -------------
	var tenderId TenderId

	err = runtime.BindStyledParameterWithOptions("simple", "tenderId", ctx.Param("tenderId"), &tenderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenderId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTenderStatusParams
	// ------------- Optional query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, false, "username", ctx.QueryParams(), &params.Username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTenderStatus(ctx, tenderId, params)
	return err
}

// UpdateTenderStatus converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTenderStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tenderId" -------------
	var tenderId TenderId

	err = runtime.BindStyledParameterWithOptions("simple", "tenderId", ctx.Param("tenderId"), &tenderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tenderId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateTenderStatusParams
	// ------------- Required query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, true, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Required query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, true, "username", ctx.QueryParams(), &params.Username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateTenderStatus(ctx, tenderId, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/bids/my", wrapper.GetUserBids)
	router.POST(baseURL+"/bids/new", wrapper.CreateBid)
	router.PATCH(baseURL+"/bids/:bidId/edit", wrapper.EditBid)
	router.PUT(baseURL+"/bids/:bidId/feedback", wrapper.SubmitBidFeedback)
	router.PUT(baseURL+"/bids/:bidId/rollback/:version", wrapper.RollbackBid)
	router.GET(baseURL+"/bids/:bidId/status", wrapper.GetBidStatus)
	router.PUT(baseURL+"/bids/:bidId/status", wrapper.UpdateBidStatus)
	router.PUT(baseURL+"/bids/:bidId/submit_decision", wrapper.SubmitBidDecision)
	router.GET(baseURL+"/bids/:tenderId/list", wrapper.GetBidsForTender)
	router.GET(baseURL+"/bids/:tenderId/reviews", wrapper.GetBidReviews)
	router.GET(baseURL+"/ping", wrapper.CheckServer)
	router.GET(baseURL+"/tenders", wrapper.GetTenders)
	router.GET(baseURL+"/tenders/my", wrapper.GetUserTenders)
	router.POST(baseURL+"/tenders/new", wrapper.CreateTender)
	router.PATCH(baseURL+"/tenders/:tenderId/edit", wrapper.EditTender)
	router.PUT(baseURL+"/tenders/:tenderId/rollback/:version", wrapper.RollbackTender)
	router.GET(baseURL+"/tenders/:tenderId/status", wrapper.GetTenderStatus)
	router.PUT(baseURL+"/tenders/:tenderId/status", wrapper.UpdateTenderStatus)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"9lI33pEAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
